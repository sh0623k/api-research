openapi: "3.0.0"
info:
  version: 1.0.0
  title: Todo Manager
  description: A sample API that uses a todo as an example to demonstrate features in the OpenAPI 3.0 specification
servers:
  - url: 0.0.0.0:3000
paths:
  /todos:
    get:
      summary: Returns all todos
      operationId: fetchTodos
      responses:
        '200':
          description: todo response
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Todo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new todo
      description: Creates a new todo in the store. Duplicates are allowed
      operationId: createTodo
      requestBody:
        description: Todo to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTodo'
      responses:
        '200':
          description: todo response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /todos/{id}:
    get:
      summary: Returns a todo by ID
      description: Returns a todo based on a single ID
      operationId: fetchTodo
      parameters:
        - name: id
          in: path
          description: ID of todo to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: todo response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a todo by ID
      description: deletes a single todo based on the ID supplied
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          description: ID of todo to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: todo deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Todo:
      required:
        - id
        - text
        - done
        - user
      properties:
        id:
          type: string
        text:
          type: string
        done:
          type: boolean
        user:
          $ref: '#/components/schemas/User'

    NewTodo:
      required:
        - text
        - userID
      properties:
        text:
          type: string
        userID:
          type: string

    User:
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
